/* create PFFT r2r kinds as links to appropiate FFTW r2r kinds */
#define PFFT_R2HC      FFTW_R2HC
#define PFFT_HC2R      FFTW_HC2R
#define PFFT_DHT       FFTW_DHT
#define PFFT_REDFT00   FFTW_REDFT00
#define PFFT_REDFT01   FFTW_REDFT01
#define PFFT_REDFT10   FFTW_REDFT10
#define PFFT_REDFT11   FFTW_REDFT11
#define PFFT_RODFT00   FFTW_RODFT00
#define PFFT_RODFT01   FFTW_RODFT01
#define PFFT_RODFT10   FFTW_RODFT10
#define PFFT_RODFT11   FFTW_RODFT11

#define PFFT_FORWARD   FFTW_FORWARD
#define PFFT_BACKWARD  FFTW_BACKWARD

typedef struct pfft_plan_s *pfft_plan;
typedef struct pfft_gcplan_s *pfft_gcplan;

typedef struct {
    int rnk_pm;
    int rnk_trafo;
    int rnk_remap;
    int iter;
    double whole;
    double *trafo;
    double *remap;
    double remap_3dto2d[2];
    double itwiddle;
    double otwiddle;
} pfft_timer_s;
typedef pfft_timer_s *pfft_timer;

typedef struct {
    int iter;
    double whole;
    double pad_zeros;
    double exchange;
} pfft_gctimer_s;
typedef pfft_gctimer_s *pfft_gctimer;


void pfft_init(void);
void pfft_cleanup(void);

void *pfft_malloc(size_t n);
double *pfft_alloc_real(size_t n);
pfft_complex *pfft_alloc_complex(size_t n);
void pfft_free(void *p);

void pfft_init_input_complex_3d(
    const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_n_start,
    pfft_complex *data);
void pfft_init_input_complex(
    int rnk_n, const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_start,
    pfft_complex *data);
void pfft_init_input_complex_hermitian_3d(
    const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_n_start,
    pfft_complex *data);
void pfft_init_input_complex_hermitian(
    int rnk_n, const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_start,
    pfft_complex *data);
void pfft_init_input_real_3d(
    const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_n_start,
    double *data);
void pfft_init_input_real(
    int rnk_n, const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_start,
    double *data);

double pfft_check_output_complex_3d(
    const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_n_start,
    const pfft_complex *data, MPI_Comm comm);
double pfft_check_output_complex(
    int rnk_n, const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_start,
    const pfft_complex *data, MPI_Comm comm);
double pfft_check_output_complex_hermitian_3d(
    const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_n_start,
    const pfft_complex *data, MPI_Comm comm);
double pfft_check_output_complex_hermitian(
    int rnk_n, const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_start,
    const pfft_complex *data, MPI_Comm comm);
double pfft_check_output_real_3d(
    const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_n_start,
    const double *data, MPI_Comm comm);
double pfft_check_output_real(
    int rnk_n, const ptrdiff_t *n, const ptrdiff_t *local_n, const ptrdiff_t *local_start,
    const double *data, MPI_Comm comm);

ptrdiff_t pfft_prod_INT(
    int d, const ptrdiff_t *vec);
ptrdiff_t pfft_sum_INT(
    int d, const ptrdiff_t *vec);
int pfft_equal_INT(
    int d, const ptrdiff_t *vec1, const ptrdiff_t *vec2);
void pfft_vcopy_INT(
    int d, const ptrdiff_t *vec1,
    ptrdiff_t *vec2);
void pfft_vadd_INT(
    int d, const ptrdiff_t *vec1, const ptrdiff_t *vec2,
    ptrdiff_t *sum);
void pfft_vsub_INT(
    int d, const ptrdiff_t *vec1, const ptrdiff_t *vec2,
    ptrdiff_t *sum);

void pfft_apr_complex_3d(
    const pfft_complex *data, const ptrdiff_t *local_n,
    const ptrdiff_t *local_start, const char *name, MPI_Comm comm);
void pfft_apr_complex_permuted_3d(
    const pfft_complex *data, const ptrdiff_t *local_n,
    const ptrdiff_t *local_start,
    int perm0, int perm1, int perm2, const char *name, MPI_Comm comm);
void pfft_apr_real_3d(
    const double *data, const ptrdiff_t *local_n,
    const ptrdiff_t *local_start, const char *name, MPI_Comm comm);

void pfft_get_args(
    int argc, char **argv, const char *name,
    int neededArgs, unsigned type,
    void *parameter);





void pfft_vfprintf(
    MPI_Comm comm, FILE *stream, const char *format, va_list ap);
void pfft_fprintf(
    MPI_Comm comm, FILE *stream, const char *format, ...);
void pfft_printf(
    MPI_Comm comm, const char *format, ...);

int pfft_create_procmesh(
    int rnk, MPI_Comm comm, const int *np,
    MPI_Comm *comm_cart);
int pfft_create_procmesh_1d(
    MPI_Comm comm, int np0,
    MPI_Comm *comm_cart_1d);
int pfft_create_procmesh_2d(
    MPI_Comm comm, int np0, int np1,
    MPI_Comm *comm_cart_2d);


#define PFFT_MANGLE_DOUBLE(name) PFFT_CONCAT(pfft_, name)
#define PFFT_MANGLE_FLOAT(name) PFFT_CONCAT(pfftf_, name)
#define PFFT_MANGLE_LONG_DOUBLE(name) PFFT_CONCAT(pfftl_, name)

/* provide FFTW_MANGLE_PREFIX macro */
#ifndef FFTW_MANGLE_PREFIX
# define FFTW_MANGLE_PREFIX(name)  name
#endif

typedef FFTW_MANGLE_PREFIX(fftw_complex) pfft_complex;
typedef FFTW_MANGLE_PREFIX(fftwf_complex) pfftf_complex;
typedef FFTW_MANGLE_PREFIX(fftwl_complex) pfftl_complex;
typedef FFTW_MANGLE_PREFIX(fftw_r2r_kind) pfft_r2r_kind;
typedef FFTW_MANGLE_PREFIX(fftwf_r2r_kind) pfftf_r2r_kind;
typedef FFTW_MANGLE_PREFIX(fftwl_r2r_kind) pfftl_r2r_kind;

PFFT_DEFINE_API(PFFT_MANGLE_DOUBLE, FFTW_MANGLE_DOUBLE, double, pfft_complex, ptrdiff_t)
PFFT_DEFINE_API(PFFT_MANGLE_FLOAT, FFTW_MANGLE_FLOAT, float, pfftf_complex, ptrdiff_t)
PFFT_DEFINE_API(PFFT_MANGLE_LONG_DOUBLE, FFTW_MANGLE_LONG_DOUBLE, long double, pfftl_complex, ptrdiff_t)

//#define FFTW(name) FFTW_MANGLE_DOUBLE(name)

#define PFFT_TRANSPOSED_NONE      (0U)
#define PFFT_TRANSPOSED_IN        (1U<< 0)
#define PFFT_TRANSPOSED_OUT       (1U<< 1)
#define PFFT_SHIFTED_NONE         (0U)
#define PFFT_SHIFTED_IN           (1U<< 2)
#define PFFT_SHIFTED_OUT          (1U<< 3)
#define PFFT_MEASURE              (0U)     /* default: use FFTW_MEASURE for fftw planer */
#define PFFT_ESTIMATE             (1U<< 4) /* use FFTW_ESTIMATE for fftw planer */
#define PFFT_PATIENT              (1U<< 5) /* use FFTW_PATIENT for fftw planer */
#define PFFT_EXHAUSTIVE           (1U<< 6) /* use FFTW_EXHAUSTIVE for fftw planer */
#define PFFT_NO_TUNE              (0U)     /* default: disable tuning of local FFTs and transpositions */
#define PFFT_TUNE                 (1U<< 7) /* enable tuning of local FFTs and transpositions */
#define PFFT_PRESERVE_INPUT       (1U<< 8) /* out-of-place plans do not overwrite the input */ 
#define PFFT_DESTROY_INPUT        (1U<< 9) /* default for out-of-place plans is: PRESERVE_INPUT*/
#define PFFT_BUFFERED_INPLACE     (1U<<10) /* use second array of same size, similar to out-of-place but results end up in input array */
#define PFFT_PAD_R2C              (1U<<11) /* Pad real values of r2c and c2r trafos in order to match the array size of the complex values */

#define PFFT_PAD_C2R              (PFFT_PAD_R2C) /* synonym for PFFT_PAD_R2C */

#define PFFT_DEFAULT_BLOCK        FFTW_MPI_DEFAULT_BLOCK

#define PFFT_DEFAULT_BLOCKS       NULL
#define PFFT_NO_GCELLS            NULL

#define FPFFT_DEFAULT_BLOCKS      (-1)
#define FPFFT_NO_GCELLS           (-1)

#define PFFT_INT                  (1U)
#define PFFT_PTRDIFF_T            (2U)
#define PFFT_FLOAT                (3U)
#define PFFT_DOUBLE               (4U)
#define PFFT_UNSIGNED             (5U)

#define PFFT_GC_NONTRANSPOSED     (0U)
#define PFFT_GC_TRANSPOSED        (1U<< 0)
#define PFFT_GC_SENDRECV          (1U<< 1)
#define PFFT_GC_RMA               (1U<< 2)

END_C_DECLS

#endif /* !PFFT_H */
